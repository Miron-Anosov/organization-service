x-env-postgres: &postgres-environment
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_DB: ${POSTGRES_DB}
  POSTGRES_MAX_CONNECTIONS: 200
  POSTGRES_HOST: ${POSTGRES_HOST}
  POSTGRES_PORT: ${POSTGRES_PORT}

x-env-db: &postgres
  environment:
    <<: *postgres-environment

x-env-jaeger-img: &jaeger-img
  environment:
    COLLECTOR_OTLP_ENABLED: ${COLLECTOR_OTLP_ENABLED}


x-env-backend-api: &backend-api-environment
  environment:
    <<: [
      *postgres-environment,
    ]

    #database
    MODE: ${MODE}
    ECHO: ${ECHO}
    POOL_SIZE_SQL_ALCHEMY_CONF: ${POOL_SIZE_SQL_ALCHEMY_CONF}
    POOL_TIMEOUT: ${POOL_TIMEOUT}
    MAX_OVERFLOW: ${MAX_OVERFLOW}

    #api config
    ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
    CONTACT_NAME: ${CONTACT_NAME}
    CONTACT_URL: ${CONTACT_URL}
    CONTACT_EMAIL: ${CONTACT_EMAIL}
    PREFIX_API: ${PREFIX_API}
    STREAM_LOG_LEVEL: ${STREAM_LOG_LEVEL}
    HTTP_LOG_LEVEL: ${HTTP_LOG_LEVEL}
    HOST_LOGS: ${HOST_LOGS}
    FORMATTER_STREAM_LOG: ${FORMATTER_STREAM_LOG}
    LOG_OUT_COMMON: ${LOG_OUT_COMMON}
    API_KEY: ${API_KEY}


    #gunicorn
    GUNICORN_TIMEOUT: ${GUNICORN_TIMEOUT}
    GUNICORN_WORKERS: ${GUNICORN_WORKERS}
    GUNICORN_BIND: ${GUNICORN_BIND}
    GUNICORN_WSGI_APP: ${GUNICORN_WSGI_APP}
    GUNICORN_WORKER_CLASS: ${GUNICORN_WORKER_CLASS}
    GUNICORN_LOG_LEVEL: ${GUNICORN_LOG_LEVEL}
    GUNICORN_ACCESSLOG: ${GUNICORN_ACCESSLOG}
    GUNICORN_ERRORLOG: ${GUNICORN_ERRORLOG}


    #Jaeger
    AGENT_HOSTNAME: ${AGENT_HOSTNAME}
    SERVICE_NAME_API: ${SERVICE_NAME_API}
    SERVICE_NAME_DB: ${SERVICE_NAME_DB}
    ENABLE_COMMENTER: ${ENABLE_COMMENTER}
    AGENT_PORT: ${AGENT_PORT}
    SERVICE_NAMESPACE_APP: ${SERVICE_NAMESPACE_APP}
    TRACE_TAGS_TEAM: ${TRACE_TAGS_TEAM}
    TRACE_TAGS_VERSION: ${TRACE_TAGS_VERSION}
    TRACE_TAGS_REGION: ${TRACE_TAGS_REGION}
    MAX_QUEUE_SIZE: ${MAX_QUEUE_SIZE}
    MAX_EXPORT_BATCH_SIZE: ${MAX_EXPORT_BATCH_SIZE}
    SCHEDULE_DELAY_MILLIS: ${SCHEDULE_DELAY_MILLIS}


networks:
  api_net:
    driver: bridge

x-service-defaults: &service-defaults
  restart: always
  networks:
    - api_net

services:

  nginx:
    <<: *service-defaults
    image: nginx:1.23.2
    container_name: ${CONTAINER_NAME_NGINX}
    ports:
      - ${NGINX_PORT}:80
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - api_socket_volume:/tmp
      - nginx_logs:/var/log/nginx
    networks:
      - api_net


  db:
    <<: [ *postgres, *service-defaults ]
    image: postgis/postgis:17-3.5
    container_name: ${CONTAINER_NAME_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/logs_postgres
    shm_size: 256mb
    command:
      - --log_destination=stderr
      - --logging_collector=on
      - --log_directory=/var/log/postgresql/
      - --max_connections=${MAX_CONNECTION}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5


  api_image_builder:
    <<: [
      *backend-api-environment
    ]
    build:
      dockerfile: Dockerfile
      context: ./
    image: ${IMAGE_API}:${VERSION_IMAGE}



  api_backend:
    <<: [
      *backend-api-environment, *service-defaults,
    ]
    container_name: ${CONTAINER_NAME_API}
    image: ${IMAGE_API}:${VERSION_IMAGE}
    command: /app/start.sh
    depends_on:
      db:
        condition: service_healthy
      nginx:
        condition: service_started
    volumes:
      - api_socket_volume:/tmp
      - api_data:/var/log/refer
    healthcheck:
      test: [ "CMD", "test", "-e", "/tmp/gunicorn.sock" ]
      interval: 10s
      timeout: 5s
      retries: 5

  jaeger:
    <<: [
      *service-defaults, *jaeger-img
    ]
    image: jaegertracing/all-in-one:1.47
    container_name: ${CONTAINER_NAME_JAEGER}
    ports:
      - "6831:6831/udp"
      - "16686:16686"


volumes:
  postgres_data:
    name: ${POSTGRES_DATA_VOLUME}
  postgres_logs:
    name: ${POSTGRES_LOGS_VOLUME}
  nginx_logs:
    name: ${NGINX_LOGS_VOLUME}
  api_data:
    name: ${API_DATA_VOLUME}
  api_socket_volume:
    name: ${SOCKET_VOLUME}
